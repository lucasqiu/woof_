Silicon Valley’s Youth Problem
In start-up land, the young barely talk to the old (and vice versa). That makes for a lot of cool apps. But great technology? Not so much.
The Cisco Meraki office in Mission Bay, San Francisco, is 40 paces from the water, and just as nice as Google’s. On a clear winter day in late December, I sat in one of its conference rooms with a company spokeswoman on my right and Sanjit Biswas on my left, peering out through floor-to-ceiling glass. On the other side: brightly patterned furniture, murals and paneled wood, a well-stocked cafeteria, a deck with spectacular views of the bay. Twelve months earlier, in a deal meant to bring fresh edge to Cisco, the networking behemoth bought Meraki from Biswas and two co-founders for $1.2 billion. Now they were making good on their promise — starting with the décor.

Like Cisco, Meraki makes networking equipment — routers, wireless devices and the software to manage them, the sorts of products that even by tech standards have always been a little short on glamour. When Biswas and his co-founders left their graduate programs at M.I.T. in 2006 to work full time on Meraki — the name comes from a Greek word that means creating something with passion — they had few start-up competitors among their peers, who were making Twitter knockoffs. Six years later, their company had become a formidable player in the midsize router market. In a field notorious for opaque technical standards, Meraki emphasized simplicity and ease of use, while also managing to tick a lot of boxes on any Web 2.0 checklist: cloud-based, scalable, mobile-friendly. “They’re buzzwords,” Biswas said. “But they’re also true.” You don’t need a SWAT team of technicians to set up a Meraki router; the system is intuitive and well designed, qualities that are especially appealing to a company like Cisco, which has dominated networking for three decades but has struggled in recent years to maintain its air of leading-edge inevitability.
The same dynamic is playing out throughout Silicon Valley, as companies like Intel post disappointing earnings reports and others like Snapchat turn down billion-dollar offers. The rapid consumer-ification of tech, led by Facebook and Google, has created a deep rift between old and new, hardware and software, enterprise companies that sell to other businesses and consumer companies that sell directly to the masses. On their face, these cleavages seem to be part of the natural order. As Biswas pointed out, “There has always been a constant churn of new companies coming in, old companies dying out.”

But the churn feels more problematic now, in part because it deprives the new guard as well as the old — and by extension, it deprives us all. In pursuing the latest and the coolest, young engineers ignore opportunities in less-sexy areas of tech like semiconductors, data storage and networking, the products that form the foundation on which all of Web 2.0 rests. Without a good router to provide reliable Wi-Fi, your Dropbox file-sharing application is not going to sync; without Nvidia’s graphics processing unit, your BuzzFeed GIF is not going to make anyone laugh. The talent — and there’s a ton of it — flowing into Silicon Valley cares little about improving these infrastructural elements. What they care about is coming up with more web apps.

As an enterprise start-up, Meraki has been impeded by its distance from the web scene. It simply does not have the same recognition as a consumer company whose products users (and potential recruits) interact with every day. “You say, ‘I work at Pinterest,’ and people know what that is — they use Pinterest,” Biswas said. “You tell them you work at Meraki, and they’re a little more reserved. They’re like, ‘What’s that?’ Once we explained our culture and our approach, we were able to hire great talent, but it’s always a challenge.” Since the acquisition, Biswas, who is 32, has fought to retain the spirit of the vanguard, but his struggle reveals an implicit fear — that young engineers might be willing to work at Meraki but not at Cisco (because it’s too big and fusty), or that clients might be willing to buy from Cisco but not Meraki (because they don’t really trust start-ups).

What’s cool? Who can be trusted? Why does one start-up go public, while another, which seems to do the same thing, fizzles? What logic, if any, pertains to where the money flows? These are the anxious questions that pervade Silicon Valley now, I think, more than ever — the vague sense of a frenzied bubble of app-making and an even vaguer dread that what we are making might not be that meaningful.

Smart Kids and Their Sexting Apps

The backlash in recent months against the self-involvement and frivolity of the new guard has actually been a long time coming. Instagram photos of opulent tech holiday parties have been lambasted, Google buses blockaded. It’s something I wrestle with myself. Back in November, I signed on for an internship this summer at Uber, the taxi-app-turned-transportation-logistics company that is one of the valley’s hottest start-ups. Last August, it raised $258 million and was valued at about $3.5 billion; this winter, it partnered with Xbox and Bud Light for Super Bowl promotions. Uber’s clashes with various municipal authorities have been reported on with the kind of glee usually reserved for philandering politicians.

When I first started using the app, I was a fan but not a disciple. It provided an efficient solution to a niche problem — rich techies needed a ride home after a night on the town and couldn’t get one — and therefore was of limited scope. I was confused why a taxi app, or any iPhone app, for that matter, needed to raise hundreds of millions of dollars. But it had a great data blog that I enjoyed, so I applied for an internship. When I got the job, friends who worked in tech were excited. Friends who worked in venture capital were excited. I started reading articles on TechCrunch about how Travis Kalanick, Uber’s chief executive, envisions a company that will become the universal way to transport purchases and people, and about how its motto had been changed from “Everyone’s Private Driver” to the more expansive “Where Lifestyle Meets Logistics.” The more I read, the more I heard, the more I started to see that vision myself.

What was impressive to me was not the ambitious leap of logic from “rideshare” to “Amazon for logistics,” but how quickly that final notion became a foregone conclusion in my mind. It’s a testament to the effectiveness of Uber’s media campaign that now, when I think about the company, I think, of course Uber will one day replace school buses, or deliver meals, or join with self-driving Google cars to eliminate private vehicles and save the environment! Conviction animates every start-up. Uber could be bigger than Facebook! Or, of course, it could go the way of the location check-in app Foursquare, which had a meteoric rise but whose valuations have since languished in the mere hundreds of millions of dollars. Not every start-up is an unequivocal success. Trying to pick the winners is part of what makes the current ecosystem so fickle, but also so fun.

The other night I was studying late for a midterm exam — I am a grad student in computer science at Columbia University — with several friends who will be working at Dropbox and Facebook this summer. Around 9 o’clock, we ordered Chinese food on Seamless. I paid one of the guys back with the digital wallet Venmo. This summer in San Francisco, I’m living with three roommates, also students doing tech internships in the valley, two at Google and one at the news aggregator Flipboard. For better or worse, these are the kinds of companies that seem to be winning the recruiting race, and if the traditional lament at Ivy League schools has been that the best talent goes to Wall Street, a newer one is taking shape: Why do these smart, quantitatively trained engineers, who could help cure cancer or fix healthcare.gov, want to work for a sexting app?

Part of the answer, I think, lies in the excitement I’ve been hinting at. Another part is prestige. Smart kids want to work for a sexting app because other smart kids want to work for the same sexting app. “Highly concentrated pools of top talent are one of the rarest things you can find,” Biswas told me, “and I think people are really attracted to those environments.” But that presumes that the talent at older companies is somehow subpar, less technically proficient, than it is at their younger counterparts. This seems unlikely if you look at Cisco’s list of patents. Yet clearly there exists some sort of discrepancy between the talent the new guard looks for and the old guard provides. There are thousands of engineers working at big corporations in Silicon Valley, many with years of experience and proven track records of creating code. Many of them have also been through several cycles of layoffs, as older companies divest assets and shave costs. So why are start-ups constantly bemoaning a shortage of talent?

The easiest explanations are mismatched skill sets or cultural friction. Older engineers are not smart in the way that start-ups want them to be — or, if they are, they have reservations about the start-up lifestyle. Both these reasons are symptomatic of how far apart the two sides have drifted. If there are whole swaths of engineering talent whose skills or styles cannot be integrated into a company, then maybe that operation has been limiting itself. As David Dalrymple, a technologist in the valley, told me, “The most innovative and effective companies are old-guard companies that have managed to reach out to the new guard, like Apple, or vice versa, like Google.”

Dalrymple’s description makes sense, but its implied recommendation — that new and old need to embrace each other — is difficult to put into practice. Several of Cisco’s previous attempts to reach out to the new guard, like the Flip video camera and the Cius tablet, were busts. The phrase that’s constantly repeated in the valley is “innovate or die.” Innovation, everyone seems to agree, is the answer. The problem is that so many “innovations” — Intel’s “creative collaboration” with the rapper will.i.am, for instance — are just some stuffy vice president’s approximation of cool. That is to say, they’re hardly innovative at all.

Dad, Engineering Lifer

My dad was 31 when he came to the Bay Area in 1995. He had a wife and two kids and went to work for a company called DSC Communications, which made telecommunications equipment. Much of the excitement in the valley at that time was over advances in Ethernet and network speeds that would eventually lead to widespread access to the Internet and to the merging of telephony and data. (Actually, we lived in a different valley then: “Telecom Valley,” which was a nickname for Petaluma, north of San Francisco.)

Three years later, when my dad decided to leave DSC, he had two job offers, both at networking start-ups founded by DSC alumni — one called Fibex, the other called Cerent. They made similar products and were of comparable size and prospects; he chose Fibex because he disliked one of the engineers at Cerent he would have had to work closely with. I was too young at the time to remember what it was like after he started his new job, but my mother tells me it was as hectic and late-night and junk-food-fueled as any of the start-up scenes of my generation. He was lucky. A little over a year after my dad joined Fibex, Cisco bought it for approximately $320 million. Then, a few months later, Cisco bought Cerent too — for $7.2 billion. That 20-fold difference between the money he made and the money he could have made has been fodder for family jokes ever since. Yet despite the obvious incentives, he never did go to another start-up.

I know that my dad’s choices were constrained by circumstances — his family, his immigration status — but his self-image was always more engineer than entrepreneur. I think he has been happy being a “lifer” at Cisco in a way that few of my friends would be at Google.

There are certainly young engineers today comfortably ensconced at established companies, just as there are 50-year-olds at their fourth start-up. But as a group, my peers feel more restless, more constantly in search of the next big thing — in part because start-ups select for and reward these impulses, which also spur the successive exoduses from Yahoo to Google, from Google to Facebook, from Facebook to younger, hipper companies. These are places where the C.E.O. often sits alongside the engineers, where recruiters talk about a “flat” hierarchy as a perk on par with paternity leave, where regular engineers get equity. Some of these changes have occurred out of necessity. “In the ‘80s, it was not uncommon to pay people salaries and give them few if any stock options,” Biswas said. “Now, you can’t have a company like Facebook and attract that kind of talent without offering equity.” Other changes simply come from the spirit of the times — when a company’s product is premised on a mobile, open, connected world, it doesn’t do for its C.E.O. to be sitting in a corner office.

There’s an App — and an A.P.I. — for That

All varieties of ambition head to Silicon Valley now — it can no longer be designated the sole domain of nerds like Steve Wozniak or even successor nerds like Mark Zuckerberg. The face of web tech today could easily be a designer, like Brian Chesky at Airbnb, or a magazine editor, like Jeff Koyen at Assignmint. Such entrepreneurs come from backgrounds outside computer science and are likely to think of their companies in terms more grandiose than their technical components. Chesky, for instance, has described Airbnb as a “community marketplace that connects people through unique spaces around the world” — a valid business model, but not one that necessarily depends on any particular technology.

By contrast, Intel, founded by Gordon Moore and Robert Noyce, both physicists, began by building memory chips that were twice as fast as old ones. Sun Microsystems introduced a new kind of modular computer system, built by one of its founders, Andy Bechtolsheim. Their “big ideas” were expressed in physical products and grew out of their own technical expertise. In that light, Meraki, which came from Biswas’s work at M.I.T., can be seen as having its origins in the old guard. And it followed what was for decades the highway that connected academia to industry: Grad students researched technology, powerful advisers brokered deals, students dropped out to parlay their technologies into proprietary solutions, everyone reaped the profits. That implicit guarantee of academia’s place in entrepreneurship has since disappeared. Graduate students still drop out, but to start bike-sharing apps and become data scientists. That is, if they even make it to graduate school. The success of self-educated savants like Sean Parker, who founded Napster and became Facebook’s first president with no college education to speak of, set the template. Enstitute, a two-year apprenticeship, embeds high-school graduates in plum tech positions. Thiel Fellowships, financed by the PayPal co-founder and Facebook investor Peter Thiel, give $100,000 to people under 20 to forgo college and work on projects of their choosing.

Much of this precocity — or dilettantism, depending on your point of view — has been enabled by web technologies, by easy-to-use programming frameworks like Ruby on Rails and Node.js and by the explosion of application programming interfaces (A.P.I.s) that supply off-the-shelf solutions to entrepreneurs who used to have to write all their own code for features like a login system or an embedded map. Now anyone can do it, thanks to the Facebook login A.P.I. or the Google Maps A.P.I.

One of the more enterprising examples of these kinds of interfaces is the start-up Stripe, which sells A.P.I.s that enable businesses to process online payments. When Meraki first looked into taking credit cards online, according to Biswas, it was a monthslong project fraught with decisions about security and cryptography. “Now, with Stripe, it takes five minutes,” he said. “When you combine that with the ability to get a server in five minutes, with Rails and Twitter Bootstrap, you see that it has become infinitely easier for four people to get a start-up off the ground.”

The sense that it is no longer necessary to have particularly deep domain knowledge before founding your own start-up is real; that and the willingness of venture capitalists to finance Mark Zuckerberg look-alikes are changing the landscape of tech products. There are more platforms, more websites, more pat solutions to serious problems — here’s an app that can fix drug addiction! promote fiscal responsibility! advance childhood literacy! Companies like Meraki that build enterprise-grade hardware and leverage years of research tend to be anomalies among the new guard. Even as the pool of founders has grown and diversified, the products themselves seem more homogeneous, more pedestrian.

Tech as Service Industry

There’s a glass-half-full way of looking at this, of course: Tech hasn’t been pedestrianized — it’s been democratized. The doors to start-up-dom have been thrown wide open. At Harvard, enrollment in the introductory computer-science course, CS50, has soared. Last semester, 39 percent of the students in the class were women, and 73 percent had never coded before. These statistics are trumpeted as a sign of computer science’s broadening appeal and, indeed, in the last couple of years the class has become something of a cult and a rite of passage that culminates in the CS50 fair, where students demo their final projects and wear T-shirts reading “I Took CS50.”

In 2010, the year I took the CS50, the hottest final project was a dating app called CrimsonSpark. By entering an email address, you could “spark” classmates you were interested in, and if they sparked you back, both of you would be notified. Over the first three days, it attracted 800 users (from an undergraduate class of 6,500), 1,800 sparks and 300 matches. It was abandoned soon after.

CrimsonSpark, like so many new-guard inventions that are wildly and briefly popular (What Would I Say, an app that analyzes your Facebook history to create a new status, comes to mind), wasn’t doing anything technically profound. In fact, it was technically regressive. Six years after Thefacebook was founded in a Harvard dorm, CrimsonSpark returned to the early days of poking. The central concept, though, was alluring: It connected people who wanted to sleep together. Likewise, many of the hottest web start-ups are not novel, at least not in the sense that Apple’s Macintosh or Intel’s 4004 microprocessor were. The arc of tech parallels the arc from manufacturing to services. The Macintosh and the microprocessor were manufactured products. Some of the most celebrated innovations in technology have been manufactured products — the router, the graphics card, the floppy disk — while advances like IBM’s “business solutions” are viewed as little more than customer support. But things are changing. Technology as service is being interpreted in more and more creative ways: Companies like Uber and Airbnb, while properly classified as interfaces and marketplaces, are really providing the most elevated service of all — that of doing it ourselves.

Recently, an engineer at a funded-to-the-gills start-up in San Francisco texted me to grumble about his company’s software architecture. Its code base was bug-ridden and disorganized — yet the business was enjoying tremendous revenue and momentum. “Never before has the idea itself been powerful enough that one can get away with a lacking implementation,” he wrote. His remark underscores a change wrought by the new guard that the old guard will have to adapt to. Tech is no longer primarily technology driven; it is idea driven.

Unhappy Valley

A few weeks ago, a programmer friend and I were talking about unhappiness, in particular the kind of unhappiness that arises when you are 21 and lavishly educated with the world at your feet. In the valley, it’s generally brought on by one of two causes: coming to the realization either that your start-up is completely trivial or that there are people your own age so knowledgeable and skilled that you may never catch up.

The latter source of frustration is the phenomenon of “the 10X engineer,” an engineer who is 10 times more productive than average. It’s a term that in its cockiness captures much of what’s good, bad and impossible about the valley. At the start-ups I visit, Friday afternoons devolve into bouts of boozing and Nerf-gun wars. Signing bonuses at Facebook are rumored to reach the six digits. In a landscape where a product may morph several times over the course of a funding round, talent — and the ability to attract it — has become one of the few stable metrics.

Yet for all the glitz and the glory and the newfound glamour, there is a surprising amount of angst in Silicon Valley. Which is probably inevitable when you put thousands of ambitious, talented young people together and tell them they’re god’s gift to technology. It’s the angst of an early hire at a start-up that only he realizes is failing; the angst of a founder who raises $5 million for his company and then finds out an acquaintance from college raised $10 million; the angst of someone who makes $100,000 at 22 but is still afraid that he may not be able to afford a house like the one he grew up in.

Tech is fun now, deliriously so, but this fun comes with a built-in anxiety that it must lead to more. As an engineer, coding should be your calling, not just a job, so you are expected to also do it in your time off. Interviewers will ask about side projects — a Firefox browser add-on maybe, or an Android version of your favorite iPhone app — which are supposed to indicate your overflowing enthusiasm for building software. Tech colloquialisms have permeated every aspect of life — hack your diet, your fitness, your dates — yet in reality, very little emphasis is placed on these activities. In a place with one of the best gender-ratios in the country for single women, female friends I talk to complain that most of the men are, in fact, not available; they are all busy working on their start-ups, or data-crunching themselves. They have prioritized self-improvement and careers over relationships.

These choices, to insulate oneself, to make technology the central theme in your life, make some sense: The marketplace is competitive, and if you’re not working on this or that potentially industry-disrupting idea, someone else will get there before you. But it breaks down when you begin to question whether or not your idea is actually industry-disrupting or, really, meaningful at all. I was asking a friend, a former computer-science major who now works for a hedge fund in New York, why he chose finance instead of tech. “There are so few start-ups that are doing things that are worthwhile to me,” he said. I protested: “What about Facebook?” He looked at me, and I thought about it. No doubt, Facebook has changed the world. Facebook has made it easier to communicate, participate, pontificate, track down new contacts and vet romantic prospects. But in other moments, it has also made me nauseatingly jealous of my friends, even as I’m aware of its unreality. Everything on Facebook, like an Instagram photo, is experienced through a soft-glow filter. And for all the noise, the pinging notifications and flashing lights, you never really feel productive on Facebook. A couple of months ago, I installed a Google Chrome extension called “Kill News Feed,” built by Neal Wu, a senior at Harvard who incidentally previously worked at the social network. Now when I absent-mindedly surf to Facebook.com, my News Feed is gloriously blank except for one line of text: “Don’t get distracted by Facebook!” it says.

The Suddenly Cool Software Engineer

In the Mission District of San Francisco, long an enclave of working-class Latinos and hipsters, one-bedroom apartments now rent for $3,000 a month. Tech firms like Spotify and Rackspace have moved in nearby, and one evening this winter, I was in the area to visit the offices of Stripe, the online-payment-processing start-up, waiting to meet Jim Danz and his sister, Lisa.

Jim was in the class above me at Harvard, but I knew him mostly by reputation. He studied computer science, interned at Facebook and spent a year working for the restaurant recommendation app Ness (acquired by OpenTable a month ago for more than $11 million) before landing at Stripe. In jeans and a giveaway T-shirt from his days as a programming intern at Jane Street, the New York proprietary trading firm known for its grueling interviews and eye-popping compensation, he seemed very much an embodiment of the suddenly cool software engineer — with his disheveled outfit, his technical chops, his surprising charisma. He speaks with the confidence of someone who has always, always landed the job.

A couple of months ago, Stripe raised $80 million in a funding round that valued the company at nearly $2 billion, and that flushness showed in the ergonomic workplace setups, the abundance of light-hued furniture. There were long birch tables in the canteen, birch benches, chairs with voluptuous curves. Books, many of them wrapped in colorful paper, were stacked and piled artfully on birch bookcases. “People always think the books are fake,” Jim said. But the shelves contained several well-known computer-science titles, presumably donated by new graduates, and Lisa, noting Michael Artin’s seminal “Algebra,” the textbook assigned in most introductory abstract algebra courses, hummed her approval. She was a math major at M.I.T. who took a lot of programming courses her senior year.

The start-up where Lisa now works, Opower, develops software that analyzes household or business utility expenditures and suggests areas for reduction. She has been there since graduating in 2010 and really likes it — the work allows her to combine engineering and environmentalism, a longtime pet cause. She’s one of the few people I know in the valley who seems committed to doing unequivocal social good. Most people, like her brother, couch their contributions to humanity in more operational terms. “I think that we’ve now reached a point where every minute a Stripe engineer spends coding saves more than a minute of the customer’s time,” Jim said. “It evens out.”

The two of them grew up in Los Altos, in a low, lovely, now exorbitantly priced house that Jim misses being near. It’s one of the many complaints he has about San Francisco, which is steadily stealing the South Bay’s thunder. (“Sometime in the last two years, the epicenter of consumer technology in Silicon Valley has moved from University Ave. to SoMa,” Terrence Rohan, a venture capitalist at Index Ventures, told me, referring to places in Palo Alto and San Francisco.) Both the geographic shift north and the increasingly short product cycles are things Jim attributes to the rise of Amazon Web Services (A.W.S.), a collection of servers owned and managed by Amazon that hosts data for nearly every start-up in the latest web ecosystem.

“In the old days, you had to be racking your own servers,” Jim said. “In the old, old days, if you were a hardware start-up, you would need a fab” — a place to fabricate — “or at least a room to tinker in. You might need to be near Milpitas or Fremont,” South Bay suburbs with room enough to host large server farms. “But now, every start-up is A.W.S. only, so there are no servers to kick, no fabs to be near. You can work anywhere. The idea that all you need is your laptop and Wi-Fi, and you can be doing anything — that’s an A.W.S.-driven invention.” This same freedom from a physical location or, for that matter, physical products has led to new work structures. There are no longer hectic six-week stretches that culminate in a release day followed by a lull. Every day is release day. You roll out new code continuously, and it’s this cycle that enables companies like Facebook, as its motto goes, to “move fast and break things.”

We were having this conversation over dinner at the office, because Jim was coming up on a deadline and didn’t have much time. The fare was all twists on college staples: sweet-potato fries, barbecued chicken, roasted radishes. There has been much tut-tutting at the lavishness of these spreads, their implied self-indulgence, and when I visited the new Airbnb headquarters the next evening in SoMa, with its soaring atrium and a Bali-themed conference room, it was, admittedly, hard not to gape. But I got it. People think of all these perks, the free food, the flexible hours, as a sort of Gen Y invention, a deliberate extension of adolescence deep into the 20s. But it’s not really about that. It’s not even about squeezing extra code out of employees. It’s about fulfilling some platonic vision of how work should be: a tight-knit group of friends, pushing themselves to greatness.

One of Stripe’s founders rowed five seat in the boat I coxed freshman year in college; the other is his older brother. Among the employee profiles posted on its website, I count three of my former teaching fellows, a hiking leader, two crushes. Silicon Valley is an order of magnitude bigger than it was 30 years ago, but still, the start-up world is intimate and clubby, with top talent marshaled at elite universities and behemoths like Facebook and Google. These days, a new college graduate arriving in the valley is merely stepping into his existing network. He will have friends from summer internships, friends from school, friends from the ever-increasing collection of incubators and fellowships. His transition will be smoothed by a hefty relocation package and cheerful emails from the young female H.R. staff at his hot web-consumer start-up.

The Youth Bubble

The valley has always been a hard-charging, ever-optimistic place, full of people who are passionate about ideas that require some suspension of disbelief. But in the last 10 years in particular, there has been an exacerbation of the qualities for which it’s been both feted and mocked: Valuations are absurdly high for companies with no revenue. The founders are younger; the pace is faster. The current reigning class is engineers of Jim and Lisa’s age, who grew up in a world where a laptop and Wi-Fi can challenge a government, where the profound and the absurd can coexist on a computer screen. There is a sense among them of manifest destiny, of “This is our time.” On Quora, the popular question-and-answer site that has become something of a weather vane for the technorati, one member asks, “What do people in Silicon Valley plan to do once they hit 35 and are officially over the hill?”

Despite its breathtaking arrogance, the question resonates; it articulates concerns about tech being, if not ageist, then at least increasingly youth-fetishizing. “People have always recruited on the basis of ‘Not your dad’s company,’ ” Biswas said. But in recent years, that precept has become a mantra. According to the company PayScale, the median age of employees at Hewlett-Packard is 39, at Facebook 26. I tried to verify with Jim the median age at Stripe, which looked to be about 25, and he paused to think. “Well, we just got an engineer whose hair is thinning.” Then he added, “I actually have no idea how old he is.”

Among those of us who grew up in the valley, this tunnel vision brings up another interesting conundrum. For Jim and Lisa (whose father is a director at NetApp, a data-storage and software-development company), for Biswas (whose father is a designer at the chip maker ARM) and for me, what happens when it is, quite literally, your dad’s company?

On a certain level, the old-guard-new-guard divide is both natural and inevitable. Young people like to be among young people; they like to work on products (consumer brands) that their friends use and in environments where they feel acutely the side effects of growth. Lisa and Jim’s responses to the question “Would you work for an old-guard company?” are studiously diplomatic — “Absolutely,” they say — but the fact remains that they chose, from a buffet of job options, fledgling companies in San Francisco.

On the other hand, the continued success of companies like Apple, which are old guard yet somehow don’t seem out of date, implies that there is still another force at work. It is possible, albeit difficult, for a large, established company to stay relevant — but it requires recognition that to a software engineer in his 20s, with endless opportunities, what matters most is not salary, or stability, or job security, but cool. Cool exists at the ineffable confluence of smart people, big money and compelling product. You can buy it, but only up to a point. For example, Microsoft, while perpetually cast as an industry dinosaur, is in fact in very good financial shape. Starting salaries are competitive with those at Google and Facebook; top talent is promoted rapidly. Last year, every Microsoft intern was given a Surface tablet; in July, they were flown to Seattle for an all-expenses-paid week whose activities included a concert headlined by Macklemore and deadmau5.

Despite these efforts, Microsoft’s cool feels coerced. One reason might be its sheer size — with a market cap of $315 billion, Microsoft will never enjoy the headlong rush of a company with nothing to lose, the bite of the underdog. But I think a more important reason is that so many of its products came up short for so long that its offerings now, however well packaged, are greeted with skepticism. About two years ago, I started noticing an advertisement for Microsoft’s Internet Explorer 9 on YouTube. Internet Explorer was the dominant web browser for nearly a decade and is still used by about a fifth of all Internet goers, according to StatCounter, but it has fallen out of favor with the tech savvy. Many websites are not compatible with Internet Explorer; its development tools are thin compared with those of Chrome and Firefox. The commercial, however, was excellent — sleek and sophisticated and featuring a dubstep remix of “Too Close” by Alex Clare; I distinctly remember watching it through to the end, watching it again and then thinking, That commercial almost made me want to use Internet Explorer. Of course, I never did switch to Internet Explorer.

Who Wants to Be Called a ‘Ninja’?

The morning after I had dinner with Jim and Lisa, I met their father, Karl Danz, in Los Altos, a quiet suburb just south of Palo Alto. Karl, a valley veteran, was easygoing and loquacious. Our conversation veered from tales of Google’s executive chairman, Eric Schmidt, in his early days at Sun Microsystems to stories about Jim and Lisa in high school. Toward the end of our interview, because he was so obviously proud of his kids and excited about the work they were doing, I asked him another version of the question I had put to them: Would he work for a new-guard company? Specifically, were he laid off from NetApp tomorrow, would he apply for a job at Stripe?

Ageism in Silicon Valley has generally been framed as an issue of the youngest companies discriminating against older engineers — or older engineers, because of inertia or complacency, failing to keep their skills up to date. There are grains of truth in these claims. But Karl’s response underscores another caveat: Older engineers form a smaller percentage of employees at top new-guard companies, not because they don’t have the skills, but because they simply don’t want to. “Let’s face it,” Karl said, “for a 50-something to show up at a start-up where the average age is 29, there is a basic cultural disconnect that’s going on. I know people, mostly those who have stayed on the technical side, who’ve popped back into an 11-person company. But there’s a hesitation there.” The flip side of the kind of cohesion I saw at Stripe is that it can be off-putting to people outside the circle. If you are 50, no matter how good your coding skills, you probably do not want to be called a “ninja” and go on bar crawls every weekend with your colleagues, which is exactly what many of my friends do.

These concerns are self-reinforcing. The structure of employment interviews at new-guard companies puts older engineers at a disadvantage; they chalk it up to a cultural gap and are subsequently more reluctant to try. I spoke recently with Gayle Laakmann McDowell, the chief executive of the website CareerCup. If tech today is yet another California gold rush, then McDowell is a boot maker or an innkeeper, a savvy businesswoman who has realized that perhaps an even bigger fortune can be made by supplying those who do the actual panning for gold. Her book, “Cracking the Coding Interview,” is the definitive prep guide to tech interviews. Sandwiched between practice questions and pages of coding solutions are anecdotes from her time as a software engineer at various tech companies and one-liners on how you, too, can get a job at Google.

As tech valuations rise to truly crazy levels, the ramifications, financial and otherwise, of a job at a pre-I.P.O. company like Dropbox or even post-I.P.O. companies like Twitter are frequently life-changing. Getting these job offers depends almost exclusively on the candidate’s performance in a series of technical interviews, where you are asked, in front of frowning hiring managers, to whip up correct and efficient code. Moreover, a majority of questions seem to be pulled from undergraduate algorithms and data-structures textbooks, which older engineers may have not laid eyes on for years. “Top tech companies emphasize rigorous algorithms problem solving and de-emphasize prior experience, which is where an older engineer is going to shine,” McDowell said. “Older engineers are also very likely not to have computer-science degrees; even if they do, C.S. was a completely different field 30 years ago.” The dearth of older engineers in new-guard companies is thus due in part to their feeling intimidated and in part to hurt feelings. “With interviews the way they are, the new-guard companies are basically saying, ‘We don’t care about the fact that you have 30 years of experience — that doesn’t matter to us.’ Older engineers often don’t react well to this.”

There are, however, some newer companies that do in fact value experience and are actively seeking it. A friend who works at a late-stage web start-up tells me that his company is no longer hiring new graduates; a quick search on LinkedIn returns dozens of engineering managers at Facebook who “trained up” at Oracle. But this sort of attitude generally appears only later in the life cycle of a start-up, when the pace of growth means it’s no longer feasible to rely on hiring friends of friends and when the approach of a public offering means the company is finally accountable as a business. “The older crowd does a better job of building things that feel substantial — more challenging and complex businesses, businesses that need to think of revenue streams, sales force, timelines,” McDowell said. But this maturation process also increases the prospect of losing out on seemingly stupid but potentially brilliant ideas. “The younger culture runs as fast as they can to build something cool,” McDowell said. “The old guard can think in a more measured way about doing things. The problem is that they may be making more reasonable steps, but they’re making fewer steps. It’s hard to compete when you’re moving slower, even if you’re moving in a consistently correct direction.”

Can’t We All Just Get Along?

Despite all the differences in culture, cool and hard-core coding prowess, there are signs that, in some areas at least, the old guard and the new guard might be inching closer together. I spoke last year with Doug Leone, a venture capitalist at Sequoia, one of Silicon Valley’s oldest and most prestigious investment firms. Sequoia funded both Stripe and Meraki, and also, almost 30 years ago, Cisco. “I see the old guard and the new guard coming together again,” Leone said. “People want the enterprise tools they use at work to look and feel like the web apps they use at home.” As an investor, Leone is especially interested in software-as-service companies that host their products on the cloud and address business applications — in other words, companies like Meraki that combine the best of both old and new. It’s a heartening prospect.

Perhaps the greatest barriers to closing the divide lie closer to home. This past Christmas, my family went to dinner with another family, the Yangs, whose son, Andrew, was a sophomore at the University of Chicago and trying to decide on a major. He was interested in computer science, having taken the online version of CS50, Harvard’s introductory computer-science course, in his spare time. But his parents, both software engineers, wanted him to choose finance. They thought that being a software engineer meant drowning in a technical quagmire, being someone else’s code monkey. Their view of tech was shaped by their years of experience at old-guard companies, where a few cynosures (Bill Gates, Steve Jobs, Larry Ellison, etc.) got most of the money and the glory. I tried to explain to them how the tech world that their son would be joining is so very different. For all the industry’s drawbacks, I have never seen it as anything less than potential-filled.

I’m not sure that they were convinced. But there is no doubt that, regardless, young talent will keep flocking to the valley. Some of us will continue to make the web products that have generated such vast wealth and changed the way we think, interact, protest. But hopefully, others among us will go to work on tech’s infrastructure, bringing the spirit of the new guard into the old. Several summers ago, I interned at Cisco in software engineering and never really considered going back. But in December, as Biswas and I wrapped up our interview, I was tempted to add one more thing: I wanted to ask for a job.
